addpath('/Users/goocy/Documents/MATLAB/spm12b/external/mne');
aveDir = '/Users/goocy/Documents/141222 Dissertation/Dohorap/averages';
dirEntries = dir(aveDir);
subjects = [];
groups = cell(1,2);
for d = 1:size(dirEntries,1)
    n = dirEntries(d).name;
    if length(n) > 1
        if strcmp(n(1:2), 'dh')
            subject = dirEntries(d).name;
            subjects = [subjects; subject];
            subjectID = str2num(subject(3:4));
            groups{(subjectID>50)+1} = subjects;
        end
    end
end

%% Load evoked data

allMags = 2:3:305;
Left_frontal = [5, 26, 29, 32, 35, 50, 53, 56, 59, 62, 65, 71, 89];
Right_frontal = [86, 92, 95, 98, 101, 104, 107, 110, 128, 131, 134, 137, 152];
Left_parietal = [38, 41, 44, 47, 68, 74, 83, 182, 200, 203, 206, 209, 224];
Right_parietal = [77, 80, 113, 116, 119, 122, 125, 227, 248, 251, 254, 257, 281];
Left_temporal = [2, 8, 11, 14, 17, 20, 23, 164, 167, 170, 173, 176, 179];
Right_temporal = [140, 143, 146, 149, 155, 158, 161, 272, 275, 296, 299, 302, 305];
Left_occipital = [185, 188, 191, 194, 197, 212, 215, 218, 221, 233, 236, 245];
Right_occipital = [230, 239, 242, 260, 263, 266, 269, 278, 284, 287, 290, 293];
% Generated by printMNEchannelLocations.py

conditions = {'Obj', 'Subj'};
directions = {'Left', 'Right'};
locations = {'frontal', 'parietal', 'temporal'};

averageData = cell(1,2);
stdevData = cell(1,2);
for g = 1:numel(groups)
    group = groups{g};
    n = numel(group);
    subjectData = zeros(numel(group), numel(conditions), numel(directions), numel(locations), 5001);
    for s = 1:size(group,1)
        subject = group(s,:);
        for c = 1:numel(conditions)
            condition = conditions{c};
            epochFile = [aveDir '/' subject '/' condition '_average-ave.fif'];
            epoch = fiff_read_evoked(epochFile);
            for d = 1:numel(directions)
                direction = directions{d};
                for l = 1:numel(locations)
                    location = locations{l};
                    eval(['channelSelection = ' direction '_' location ';']);
                    data = mean(epoch.evoked.epochs(channelSelection,:))';
                    subjectData(s,c,d,l,:) = squeeze(subjectData(s,c,d,l,:)) + data ./ n;
                end
            end;
        end;
    end;
    % Build a grand average and grand standard deviation
    averageData{g} = squeeze(mean(subjectData,1));
    varianceEstimator = zeros(numel(conditions), numel(directions), numel(locations), 5001);
    for s = 1:size(group,1)
        varianceEstimator = varianceEstimator + (squeeze(subjectData(s,:,:,:,:)) - averageData{g}).^2;
    end
    correctedStd = sqrt(varianceEstimator) ./ (n-1.5);
    stdevData{g} = correctedStd;
end;

%% Load the trigger times
triggerPath = '/Users/goocy/Documents/141212 Status Dohorap/Experiment/Dohorap/Speech/';
triggerFiles = {[triggerPath 'offsets_der.txt'], [triggerPath 'offsets_den.txt']};
triggerData = [];
for i = 1:2
    triggerData = [triggerData; importdata(triggerFiles{i})];
end


%% Plot the whole thing

conditionColors = [[0.6 0 0]; [0 0 1]];
timescale = -1.0:0.001:4.0;
xText = 'Time after condition trigger in s';
yText = 'Evoked field activity in fT';
conditionText = {'Object-relative clauses', 'Subject-relative clauses'};
groupText = {'children', 'adults'};

% Prepare sensor layout
sensorPositions = zeros(306,3);
for i = 1:306
    sensorPositions(i,:) = epoch.info.chs(i).coil_trans(1:3,4);
end
[ttheta,tphi,~]=cart2sph(sensorPositions(:,1),sensorPositions(:,2),sensorPositions(:,3));
[sensorsX,sensorsY]=pol2cart(ttheta,pi/2-tphi);

scaling = 1e15;
xlims = [-0.2, 2.5];
for g = 1:numel(groups)
    group = groups{g};
    ylims = [min(averageData{g}(:)), max(averageData{g}(:));] * 1.1 * scaling;
    for d = 1:numel(directions)
        direction = directions{d};
        for l = 1:numel(locations)
            location = locations{l};
            f = figure();
            
            % Design the main line plot
            plotSub = axes('Parent',f,'Position',[0.1 0.25 0.8 0.7]);
            hold(plotSub,'all');
            set(plotSub,'ColorOrder', distinguishable_colors(10));
            set(plotSub,'Box', 'on', 'LineWidth', 2);
            titleText = ['Grand average ERF in ' direction '-' location ' sensor regions'];
            aData = zeros(2,5001);
            for c = 1:numel(conditions)
                condition = conditions{c};
                color = conditionColors(c,:);
                a = smooth(squeeze(averageData{g}(c,d,l,:))') * scaling;
                s = smooth(squeeze(stdevData{g}(c,d,l,:))') * scaling;
                xFill = [-2, timescale, 6, fliplr(timescale), -2];
                yFill = [0, a-s, 0, fliplr(a+s), 0];
                fill(xFill, yFill, color, 'EdgeColor', 'None', 'FaceAlpha', 0.2);
                aData(c,:) = a;
            end
            xlim(xlims);
            ylim(ylims);
            title(titleText);
            ylabel(yText); xlabel(xText);
            p = plot(timescale, aData, 'LineWidth', 2);
            for i=1:2; set(p(i), 'Color', conditionColors(i,:)); end;
            leg = legend(p,conditionText{1}, conditionText{2}, 'Location', 'NorthEast');
            set(leg, 'LineWidth',2);
            posAxes = get(plotSub, 'Position');
            
            % Overlay the sensor layout
            eval(['channelSelection = ' direction '_' location ';']);
            layoutSub = axes('Parent',f, 'Position', [0.6 0.2 0.35 0.35]);
            scatter(sensorsX(allMags), sensorsY(allMags),'Marker','o', 'Parent', layoutSub);
            hold(layoutSub,'all');
            scatter(sensorsX(channelSelection), sensorsY(channelSelection), 'MarkerFaceColor','r', 'Parent', layoutSub);
            set(layoutSub, 'DataAspectRatio', [1 1 1]);
            set(layoutSub, 'Color', 'None');
            set(layoutSub, 'Visible', 'off');
            
            % Overlay the sentence trigger
            triggerSub = axes('Parent',f);
            set(triggerSub, 'Box', 'on', 'LineWidth', 2);
            set(triggerSub, 'Position', [0.1 0.07 0.8 0.04]);
            set(triggerSub, 'Color', [1 1 1]);
            hold(triggerSub, 'all');
            for i = 1:length(triggerData)
                t = triggerData(i);
                w = 0.001;
                X = [t-w,t-w,t+w,t+w];
                Y = [0,1,1,0];
                patch(X,Y,[0 0 0],'EdgeColor','None','Parent',triggerSub,'FaceAlpha',0.3);
            end
            xlabel('End of sentence');
            hold(triggerSub,'off');
            xlim(xlims);
            set(triggerSub, 'XTick', []);
            set(triggerSub, 'YTick', []);

            % Save the result
            savefig(f, [groupText{g} ' - comparison of ' direction '-' location ' sensor activity.fig']);
            print(f, [groupText{g} ' - comparison of ' direction '-' location ' sensor activity.png'], '-dpng');
            close(f);
        end
    end
end